#include <Arduino.h>
#include <Ds1302.h>

#define PIN_ENA 3
#define PIN_CLK 4
#define PIN_DAT 2
#define TRIG 8
#define ECHO 10
#define VALVULA 9   // entrada para riego
#define VALVULADESAGOTE 11   // salida para riego

const int horaVerano = 7;
const int horaInvierno = 14;
const int profundidadBancal = 5;
const int distanciaDesagote = 10;

Ds1302 rtc(PIN_ENA, PIN_CLK, PIN_DAT);

const static char* WeekDays[] = {
  "Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"
};

void setup() {
  pinMode(VALVULA, OUTPUT);
  pinMode(VALVULADESAGOTE, OUTPUT);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);
  Serial.begin(9600);

  rtc.init();

  if (rtc.isHalted()) {
    Serial.println("RTC halted, setting default time...");
    Ds1302::DateTime dt = {
      .year = 25, .month = Ds1302::MONTH_SEP, .day = 17,
      .hour = 14, .minute = 40, .second = 30, .dow = Ds1302::DOW_WED
    };
    rtc.setDateTime(&dt);
  }
}

void loop() {
  diaYHora();

  if (esHoraDeRiego()) {
    int d = distanciaAgua();
    if (d > profundidadBancal) {
      digitalWrite(VALVULA, LOW);   // abre riego
    } else {
      digitalWrite(VALVULA, HIGH);  // cierra riego
      Serial.println("COMIENZA DESAGOTE");
      int d2 = distanciaAgua();
      if (d2 < distanciaDesagote) {
        digitalWrite(VALVULA, LOW); // abre para desagote
      }
    }
  } else {
    digitalWrite(VALVULA, HIGH); // fuera de hora = apagado
  }

  delay(500); // pequeÃ±a pausa para no saturar
}

// --- Funciones auxiliares ---

bool esHoraDeRiego() {
  Ds1302::DateTime now;
  rtc.getDateTime(&now);
  int mes = now.month;
  int hora = now.hour;

  bool horaAdecuada = false;

  if ((mes <= 4) || (mes >= 10)) {   // verano
    if (hora == horaVerano) horaAdecuada = true;
  } else {                           // invierno
    if (hora == horaInvierno) horaAdecuada = true;
  }

  if (horaAdecuada) Serial.println("Es hora de regar!");
  else Serial.println("No es hora de regar!");

  return horaAdecuada;
}

int distanciaAgua() {
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);

  long duracion = pulseIn(ECHO, HIGH, 30000); // timeout 30ms
  if (duracion == 0) return -1; // sin lectura

  int d = duracion * 0.034 / 2;
  Serial.print("Distancia: ");
  Serial.print(d);
  Serial.println(" cm");
  return d;
}

void diaYHora() {
  Ds1302::DateTime now;
  rtc.getDateTime(&now);
  static uint8_t last_second = 0;

  if (last_second != now.second) {
    last_second = now.second;

    Serial.print("20"); Serial.print(now.year);
    Serial.print('-'); if (now.month < 10) Serial.print('0'); Serial.print(now.month);
    Serial.print('-'); if (now.day < 10) Serial.print('0'); Serial.print(now.day);
    Serial.print(' '); Serial.print(WeekDays[now.dow - 1]);
    Serial.print(' '); if (now.hour < 10) Serial.print('0'); Serial.print(now.hour);
    Serial.print(':'); if (now.minute < 10) Serial.print('0'); Serial.print(now.minute);
    Serial.print(':'); if (now.second < 10) Serial.print('0'); Serial.print(now.second);
    Serial.println();
  }
}
